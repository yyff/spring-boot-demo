package demo.user;


import co.elastic.apm.api.ElasticApm;
import co.elastic.apm.api.Span;
import co.elastic.apm.api.Transaction;
import demo.api.Order;
import demo.api.OrderAPI;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) throws Exception {

		// 除了在框架默认采集的span外，还可以的给指定的代码片段增加自定义span
		Transaction parent = ElasticApm.currentTransaction();
		Span span = parent.startSpan();
			try {
			span.setName("Thread.sleep");
			span.addLabel("opArg", 1000);
			// do your things
			Thread.sleep(1000);
		} catch (Exception e) {
			span.captureException(e);
			throw e;
		} finally {
			span.end();
		}
		// 创建User
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}



	@GetMapping(path="/{userID}")
	public @ResponseBody UserWithOrders getUser(@PathVariable int userID) throws Exception {
		// This returns a JSON or XML with the users
		User u = userRepository.findById(userID).get();
		Order[] orders = OrderAPI.getOrdersByUserID(userID);
		return new UserWithOrders(u, orders);
	}


}


